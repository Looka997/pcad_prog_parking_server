package server.model;

import common.ContentMessage;
import common.TipoRichiesta;

import java.sql.*;
import java.util.Collection;


public class MovimentiDao extends AbstractDao<ContentMessage> {

    private static final String tableName = "MOVIMENTI";
    private static final String tableSQL = "create table " + tableName + " (" +
            "  id int not null generated by default as identity," +
            "  date timestamp not null," +
            "  plate varchar(50) not null," +
            "  brand varchar(50) not null," +
            "  enter boolean not null" +
            ");";

    public MovimentiDao() {
        super(tableSQL, tableName);
    }

    public MovimentiDao(Connection connection) {
        super(tableSQL, tableName, connection);
    }

    public TipoRichiesta checkLastMovement(String plate) throws SQLException {
        String query = "SELECT enter from " + tableName  +
                " WHERE plate = ?" +
                " ORDER BY ID DESC" +
                " LIMIT 1";
        PreparedStatement stmt = connection.prepareStatement(query);
        stmt.setString(1,plate);
        ResultSet rs = stmt.executeQuery();
        if (rs.next())
            return rs.getBoolean("ENTER")? TipoRichiesta.ENTRATA : TipoRichiesta.USCITA;
        return TipoRichiesta.UNSET;
    }

    public boolean insert(ContentMessage contentMessage, boolean check) throws SQLException {
        if (check){
            synchronized (this){
                return !checkLastMovement(contentMessage.getPlate()).equals(contentMessage.getTipoRichiesta())?
                        insert(contentMessage) : false;
            }
        }
        return insert(contentMessage);
    }
    @Override
    public boolean insert(ContentMessage contentMessage) {
        try {
            PreparedStatement stmt = connection.prepareStatement(
                    "INSERT INTO " + tableName + " (date, plate, brand, enter) VALUES "
                            + "(?,?,?,?)");
            stmt.setTimestamp(1, Timestamp.from(contentMessage.getDate()));
            stmt.setString(2, contentMessage.getPlate());
            stmt.setString(3, contentMessage.getBrand());
            stmt.setBoolean(4, contentMessage
                    .getTipoRichiesta().compareTo(TipoRichiesta.ENTRATA) == 0);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public ContentMessage get(String id) {
        throw new UnsupportedOperationException();
    }

    @Override
    public Collection<ContentMessage> getAll() {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean update(ContentMessage contentMessage, String[] params) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean delete(ContentMessage contentMessage) {
        throw new UnsupportedOperationException();
    }
}
